/**
 * Gestion de stock REST API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ErrorDto } from '../model/errorDto';
// @ts-ignore
import { UtilisateurResponseDto } from '../model/utilisateurResponseDto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class UtilisateurControllerService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param idUtilisateur 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public delete1(idUtilisateur: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public delete1(idUtilisateur: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public delete1(idUtilisateur: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public delete1(idUtilisateur: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (idUtilisateur === null || idUtilisateur === undefined) {
            throw new Error('Required parameter idUtilisateur was null or undefined when calling delete1.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (bearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('bearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gestiondestock/api/v1/utilisateurs/delete/${this.configuration.encodeParam({name: "idUtilisateur", value: idUtilisateur, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAll1(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<UtilisateurResponseDto>>;
    public findAll1(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<UtilisateurResponseDto>>>;
    public findAll1(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<UtilisateurResponseDto>>>;
    public findAll1(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        // authentication (bearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('bearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gestiondestock/api/v1/utilisateurs/showAll`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<UtilisateurResponseDto>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param idUtilisateur 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findById1(idUtilisateur: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<UtilisateurResponseDto>;
    public findById1(idUtilisateur: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<UtilisateurResponseDto>>;
    public findById1(idUtilisateur: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<UtilisateurResponseDto>>;
    public findById1(idUtilisateur: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (idUtilisateur === null || idUtilisateur === undefined) {
            throw new Error('Required parameter idUtilisateur was null or undefined when calling findById1.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (bearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('bearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gestiondestock/api/v1/utilisateurs/${this.configuration.encodeParam({name: "idUtilisateur", value: idUtilisateur, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<UtilisateurResponseDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Créer un nouvel utilisateur
     * @param nom 
     * @param prenom 
     * @param email 
     * @param motDePasse 
     * @param dateDeNaissance 
     * @param adresse1 
     * @param ville 
     * @param codePostal 
     * @param pays 
     * @param entrepriseId 
     * @param adresse2 
     * @param image 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save1(nom: string, prenom: string, email: string, motDePasse: string, dateDeNaissance: string, adresse1: string, ville: string, codePostal: string, pays: string, entrepriseId: number, adresse2?: string, image?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<UtilisateurResponseDto>;
    public save1(nom: string, prenom: string, email: string, motDePasse: string, dateDeNaissance: string, adresse1: string, ville: string, codePostal: string, pays: string, entrepriseId: number, adresse2?: string, image?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<UtilisateurResponseDto>>;
    public save1(nom: string, prenom: string, email: string, motDePasse: string, dateDeNaissance: string, adresse1: string, ville: string, codePostal: string, pays: string, entrepriseId: number, adresse2?: string, image?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<UtilisateurResponseDto>>;
    public save1(nom: string, prenom: string, email: string, motDePasse: string, dateDeNaissance: string, adresse1: string, ville: string, codePostal: string, pays: string, entrepriseId: number, adresse2?: string, image?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (nom === null || nom === undefined) {
            throw new Error('Required parameter nom was null or undefined when calling save1.');
        }
        if (prenom === null || prenom === undefined) {
            throw new Error('Required parameter prenom was null or undefined when calling save1.');
        }
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling save1.');
        }
        if (motDePasse === null || motDePasse === undefined) {
            throw new Error('Required parameter motDePasse was null or undefined when calling save1.');
        }
        if (dateDeNaissance === null || dateDeNaissance === undefined) {
            throw new Error('Required parameter dateDeNaissance was null or undefined when calling save1.');
        }
        if (adresse1 === null || adresse1 === undefined) {
            throw new Error('Required parameter adresse1 was null or undefined when calling save1.');
        }
        if (ville === null || ville === undefined) {
            throw new Error('Required parameter ville was null or undefined when calling save1.');
        }
        if (codePostal === null || codePostal === undefined) {
            throw new Error('Required parameter codePostal was null or undefined when calling save1.');
        }
        if (pays === null || pays === undefined) {
            throw new Error('Required parameter pays was null or undefined when calling save1.');
        }
        if (entrepriseId === null || entrepriseId === undefined) {
            throw new Error('Required parameter entrepriseId was null or undefined when calling save1.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nom, 'nom');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>prenom, 'prenom');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>email, 'email');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>motDePasse, 'motDePasse');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateDeNaissance, 'dateDeNaissance');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>adresse1, 'adresse1');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>adresse2, 'adresse2');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ville, 'ville');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>codePostal, 'codePostal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pays, 'pays');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>entrepriseId, 'entrepriseId');

        let localVarHeaders = this.defaultHeaders;

        // authentication (bearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('bearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (image !== undefined) {
            localVarFormParams = localVarFormParams.append('image', <any>image) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gestiondestock/api/v1/utilisateurs/create`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<UtilisateurResponseDto>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Mettre à jour un utilisateur existant
     * @param idUtilisateur 
     * @param nom 
     * @param prenom 
     * @param email 
     * @param motDePasse 
     * @param dateDeNaissance 
     * @param adresse1 
     * @param ville 
     * @param codePostal 
     * @param pays 
     * @param entrepriseId 
     * @param adresse2 
     * @param image 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update1(idUtilisateur: number, nom: string, prenom: string, email: string, motDePasse: string, dateDeNaissance: string, adresse1: string, ville: string, codePostal: string, pays: string, entrepriseId: number, adresse2?: string, image?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<UtilisateurResponseDto>;
    public update1(idUtilisateur: number, nom: string, prenom: string, email: string, motDePasse: string, dateDeNaissance: string, adresse1: string, ville: string, codePostal: string, pays: string, entrepriseId: number, adresse2?: string, image?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<UtilisateurResponseDto>>;
    public update1(idUtilisateur: number, nom: string, prenom: string, email: string, motDePasse: string, dateDeNaissance: string, adresse1: string, ville: string, codePostal: string, pays: string, entrepriseId: number, adresse2?: string, image?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<UtilisateurResponseDto>>;
    public update1(idUtilisateur: number, nom: string, prenom: string, email: string, motDePasse: string, dateDeNaissance: string, adresse1: string, ville: string, codePostal: string, pays: string, entrepriseId: number, adresse2?: string, image?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (idUtilisateur === null || idUtilisateur === undefined) {
            throw new Error('Required parameter idUtilisateur was null or undefined when calling update1.');
        }
        if (nom === null || nom === undefined) {
            throw new Error('Required parameter nom was null or undefined when calling update1.');
        }
        if (prenom === null || prenom === undefined) {
            throw new Error('Required parameter prenom was null or undefined when calling update1.');
        }
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling update1.');
        }
        if (motDePasse === null || motDePasse === undefined) {
            throw new Error('Required parameter motDePasse was null or undefined when calling update1.');
        }
        if (dateDeNaissance === null || dateDeNaissance === undefined) {
            throw new Error('Required parameter dateDeNaissance was null or undefined when calling update1.');
        }
        if (adresse1 === null || adresse1 === undefined) {
            throw new Error('Required parameter adresse1 was null or undefined when calling update1.');
        }
        if (ville === null || ville === undefined) {
            throw new Error('Required parameter ville was null or undefined when calling update1.');
        }
        if (codePostal === null || codePostal === undefined) {
            throw new Error('Required parameter codePostal was null or undefined when calling update1.');
        }
        if (pays === null || pays === undefined) {
            throw new Error('Required parameter pays was null or undefined when calling update1.');
        }
        if (entrepriseId === null || entrepriseId === undefined) {
            throw new Error('Required parameter entrepriseId was null or undefined when calling update1.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nom, 'nom');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>prenom, 'prenom');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>email, 'email');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>motDePasse, 'motDePasse');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateDeNaissance, 'dateDeNaissance');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>adresse1, 'adresse1');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>adresse2, 'adresse2');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ville, 'ville');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>codePostal, 'codePostal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pays, 'pays');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>entrepriseId, 'entrepriseId');

        let localVarHeaders = this.defaultHeaders;

        // authentication (bearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('bearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (image !== undefined) {
            localVarFormParams = localVarFormParams.append('image', <any>image) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gestiondestock/api/v1/utilisateurs/update/${this.configuration.encodeParam({name: "idUtilisateur", value: idUtilisateur, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<UtilisateurResponseDto>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
