/**
 * Gestion de stock REST API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { EntrepriseResponseDto } from '../model/entrepriseResponseDto';
// @ts-ignore
import { ErrorDto } from '../model/errorDto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class EntrepriseControllerService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param idEntreprise 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public delete5(idEntreprise: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public delete5(idEntreprise: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public delete5(idEntreprise: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public delete5(idEntreprise: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (idEntreprise === null || idEntreprise === undefined) {
            throw new Error('Required parameter idEntreprise was null or undefined when calling delete5.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (bearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('bearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gestiondestock/api/v1/entreprises/delete/${this.configuration.encodeParam({name: "idEntreprise", value: idEntreprise, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAll5(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<EntrepriseResponseDto>>;
    public findAll5(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<EntrepriseResponseDto>>>;
    public findAll5(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<EntrepriseResponseDto>>>;
    public findAll5(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        // authentication (bearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('bearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gestiondestock/api/v1/entreprises/showAll`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<EntrepriseResponseDto>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param idEntreprise 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findById5(idEntreprise: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<EntrepriseResponseDto>;
    public findById5(idEntreprise: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<EntrepriseResponseDto>>;
    public findById5(idEntreprise: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<EntrepriseResponseDto>>;
    public findById5(idEntreprise: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (idEntreprise === null || idEntreprise === undefined) {
            throw new Error('Required parameter idEntreprise was null or undefined when calling findById5.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (bearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('bearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gestiondestock/api/v1/entreprises/${this.configuration.encodeParam({name: "idEntreprise", value: idEntreprise, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<EntrepriseResponseDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Créer une nouvelle entreprise compatible Swagger UI
     * @param nomEntreprise 
     * @param description 
     * @param email 
     * @param adresse1 
     * @param ville 
     * @param codePostal 
     * @param pays 
     * @param codeFiscal 
     * @param numTel 
     * @param steWeb 
     * @param adresse2 
     * @param photo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save5(nomEntreprise: string, description: string, email: string, adresse1: string, ville: string, codePostal: string, pays: string, codeFiscal: string, numTel: string, steWeb: string, adresse2?: string, photo?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<EntrepriseResponseDto>;
    public save5(nomEntreprise: string, description: string, email: string, adresse1: string, ville: string, codePostal: string, pays: string, codeFiscal: string, numTel: string, steWeb: string, adresse2?: string, photo?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<EntrepriseResponseDto>>;
    public save5(nomEntreprise: string, description: string, email: string, adresse1: string, ville: string, codePostal: string, pays: string, codeFiscal: string, numTel: string, steWeb: string, adresse2?: string, photo?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<EntrepriseResponseDto>>;
    public save5(nomEntreprise: string, description: string, email: string, adresse1: string, ville: string, codePostal: string, pays: string, codeFiscal: string, numTel: string, steWeb: string, adresse2?: string, photo?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (nomEntreprise === null || nomEntreprise === undefined) {
            throw new Error('Required parameter nomEntreprise was null or undefined when calling save5.');
        }
        if (description === null || description === undefined) {
            throw new Error('Required parameter description was null or undefined when calling save5.');
        }
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling save5.');
        }
        if (adresse1 === null || adresse1 === undefined) {
            throw new Error('Required parameter adresse1 was null or undefined when calling save5.');
        }
        if (ville === null || ville === undefined) {
            throw new Error('Required parameter ville was null or undefined when calling save5.');
        }
        if (codePostal === null || codePostal === undefined) {
            throw new Error('Required parameter codePostal was null or undefined when calling save5.');
        }
        if (pays === null || pays === undefined) {
            throw new Error('Required parameter pays was null or undefined when calling save5.');
        }
        if (codeFiscal === null || codeFiscal === undefined) {
            throw new Error('Required parameter codeFiscal was null or undefined when calling save5.');
        }
        if (numTel === null || numTel === undefined) {
            throw new Error('Required parameter numTel was null or undefined when calling save5.');
        }
        if (steWeb === null || steWeb === undefined) {
            throw new Error('Required parameter steWeb was null or undefined when calling save5.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nomEntreprise, 'nomEntreprise');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>description, 'description');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>email, 'email');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>adresse1, 'adresse1');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>adresse2, 'adresse2');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ville, 'ville');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>codePostal, 'codePostal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pays, 'pays');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>codeFiscal, 'codeFiscal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>numTel, 'numTel');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>steWeb, 'steWeb');

        let localVarHeaders = this.defaultHeaders;

        // authentication (bearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('bearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (photo !== undefined) {
            localVarFormParams = localVarFormParams.append('photo', <any>photo) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gestiondestock/api/v1/entreprises/create`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<EntrepriseResponseDto>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Mettre à jour une entreprise existante compatible Swagger UI
     * @param idEntreprise 
     * @param nomEntreprise 
     * @param description 
     * @param email 
     * @param adresse1 
     * @param ville 
     * @param codePostal 
     * @param pays 
     * @param codeFiscal 
     * @param numTel 
     * @param steWeb 
     * @param adresse2 
     * @param photo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update5(idEntreprise: number, nomEntreprise: string, description: string, email: string, adresse1: string, ville: string, codePostal: string, pays: string, codeFiscal: string, numTel: string, steWeb: string, adresse2?: string, photo?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<EntrepriseResponseDto>;
    public update5(idEntreprise: number, nomEntreprise: string, description: string, email: string, adresse1: string, ville: string, codePostal: string, pays: string, codeFiscal: string, numTel: string, steWeb: string, adresse2?: string, photo?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<EntrepriseResponseDto>>;
    public update5(idEntreprise: number, nomEntreprise: string, description: string, email: string, adresse1: string, ville: string, codePostal: string, pays: string, codeFiscal: string, numTel: string, steWeb: string, adresse2?: string, photo?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<EntrepriseResponseDto>>;
    public update5(idEntreprise: number, nomEntreprise: string, description: string, email: string, adresse1: string, ville: string, codePostal: string, pays: string, codeFiscal: string, numTel: string, steWeb: string, adresse2?: string, photo?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (idEntreprise === null || idEntreprise === undefined) {
            throw new Error('Required parameter idEntreprise was null or undefined when calling update5.');
        }
        if (nomEntreprise === null || nomEntreprise === undefined) {
            throw new Error('Required parameter nomEntreprise was null or undefined when calling update5.');
        }
        if (description === null || description === undefined) {
            throw new Error('Required parameter description was null or undefined when calling update5.');
        }
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling update5.');
        }
        if (adresse1 === null || adresse1 === undefined) {
            throw new Error('Required parameter adresse1 was null or undefined when calling update5.');
        }
        if (ville === null || ville === undefined) {
            throw new Error('Required parameter ville was null or undefined when calling update5.');
        }
        if (codePostal === null || codePostal === undefined) {
            throw new Error('Required parameter codePostal was null or undefined when calling update5.');
        }
        if (pays === null || pays === undefined) {
            throw new Error('Required parameter pays was null or undefined when calling update5.');
        }
        if (codeFiscal === null || codeFiscal === undefined) {
            throw new Error('Required parameter codeFiscal was null or undefined when calling update5.');
        }
        if (numTel === null || numTel === undefined) {
            throw new Error('Required parameter numTel was null or undefined when calling update5.');
        }
        if (steWeb === null || steWeb === undefined) {
            throw new Error('Required parameter steWeb was null or undefined when calling update5.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nomEntreprise, 'nomEntreprise');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>description, 'description');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>email, 'email');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>adresse1, 'adresse1');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>adresse2, 'adresse2');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ville, 'ville');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>codePostal, 'codePostal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pays, 'pays');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>codeFiscal, 'codeFiscal');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>numTel, 'numTel');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>steWeb, 'steWeb');

        let localVarHeaders = this.defaultHeaders;

        // authentication (bearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('bearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (photo !== undefined) {
            localVarFormParams = localVarFormParams.append('photo', <any>photo) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gestiondestock/api/v1/entreprises/update/${this.configuration.encodeParam({name: "idEntreprise", value: idEntreprise, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<EntrepriseResponseDto>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
